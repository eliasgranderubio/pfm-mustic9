<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Sat Apr 18 23:11:08 CEST 2015
  Author:  egrande
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="Master_Dispatcher_Process"
               targetNamespace="http://xmlns.oracle.com/pfm_mustic9/master_soa/Master_Dispatcher_Process"
               xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
               xmlns:client="http://xmlns.oracle.com/pfm_mustic9/master_soa/Master_Dispatcher_Process"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
               xmlns:ns1="http://dispatcher.ws.master.cracking.uem.es/"
               xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns2="http://ws.name_server.cracking.uem.es/"
         xmlns:ns3="http://ws.slave.cracking.uem.es/"
         xmlns:ns4="http://xmlns.oracle.com/Window_Size_Rules/Window_Size_Rules_DecisionService_1"
         xmlns:ns5="http://attacks.ws.master.cracking.uem.es/"
         xmlns:ns6="http://words.ws.master.cracking.uem.es/"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:ns7="http://xmlns.oracle.com/pfm-mustic9/master_soa/Get_Processor_Info_Process"
         xmlns:ns8="http://xmlns.oracle.com/bpel"
         xmlns:ns9="http://windows.master.cracking.uem.es/"
         xmlns:ns10="http://master.cracking.uem.es/">

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  --> 
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="master_dispatcher_process_client" partnerLinkType="ns1:Master_Dispatcher_Process" myRole="Master_Dispatcher"/>
    <partnerLink name="OSB_Name_Server_WS"
                 partnerLinkType="ns2:OSB_Name_Server_WS"
                 partnerRole="Name_Server_WS"/>
    <partnerLink name="OSB_Slave_John_The_Ripper_WS"
                 partnerLinkType="ns3:OSB_Slave_John_The_Ripper_WS"
                 partnerRole="Slave_John_The_Ripper_WS"/>
    <partnerLink name="OSB_Slave_THC_Hydra_WS"
                 partnerLinkType="ns3:OSB_Slave_THC_Hydra_WS"
                 partnerRole="Slave_THC_Hydra_WS"/>
    <partnerLink name="Window_Size_Rules.Window_Size_Rules_DecisionService_1"
                 partnerLinkType="ns4:IDecisionService_PL"
                 partnerRole="IDecisionService_Role"/>
    <partnerLink name="Master_Attack_WS" partnerLinkType="ns5:Master_Attack_WS"
                 partnerRole="Master_Attack_WS"/>
    <partnerLink name="Get_Words_Range_Process.get_words_range_process_client"
                 partnerLinkType="ns6:Get_Words_Range_Process"
                 partnerRole="Master_Word_WS"/>
    <partnerLink name="Get_Processor_Info_Process.get_processor_info_process_client"
                 partnerLinkType="ns7:Get_Processor_Info_Process"
                 partnerRole="Get_Processor_Info_ProcessProvider"/>
    <partnerLink name="MasterHelper.MasterHelperService"
                 partnerLinkType="ns10:MasterHelper.MasterHelperService"
                 partnerRole="MasterHelperInterface"/>
  </partnerLinks>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable" messageType="ns1:dispatchRequest"/>
    <variable name="getAllActiveAttacksId_OutputVariable"
              messageType="ns5:getAllActiveAttacksIdResponse"/>
  </variables>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">

    <!-- Receive input from requestor. (Note: This maps to operation defined in Master_Dispatcher_Process.wsdl) -->
    <receive name="receiveInput" partnerLink="master_dispatcher_process_client" portType="ns1:Master_Dispatcher" operation="dispatch" variable="inputVariable" createInstance="yes"/>
    <scope name="GetActiveAttacksScope" exitOnStandardFault="no">
      <variables>
        <variable name="getActiveAttacksInvoke_getAllActiveAttacksId_InputVariable"
                  messageType="ns5:getAllActiveAttacksId"/>
      </variables>
      <invoke name="getActiveAttacksInvoke" partnerLink="Master_Attack_WS"
              portType="ns5:Master_Attack_WS" operation="getAllActiveAttacksId"
              inputVariable="getActiveAttacksInvoke_getAllActiveAttacksId_InputVariable"
              outputVariable="getAllActiveAttacksId_OutputVariable"
              bpelx:invokeAsDetail="no"/>
    </scope>
    <if name="CheckActiveAttacks">
      <documentation>
        <![CDATA[EmptyActiveAttacks]]>
      </documentation>
      <condition>$getAllActiveAttacksId_OutputVariable.parameters/return/ids = '' or ora:countNodes('getAllActiveAttacksId_OutputVariable','parameters','return/ids/id') = 0</condition>
      <exit name="ThereAreNotActiveAttacks"/>
      <else>
        <documentation>
          <![CDATA[ThereAreActiveAttacks]]>
        </documentation>
        <scope name="ProcessActiveAttackScope" exitOnStandardFault="no">
          <variables>
            <variable name="getAvailableSlavesInvoke_getAvailableSlaves_InputVariable"
                      messageType="ns2:getAvailableSlaves"/>
            <variable name="getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable"
                      messageType="ns2:getAvailableSlavesResponse"/>
            <variable name="maxActiveAttacks" type="xsd:int">
              <from>ora:countNodes('getAllActiveAttacksId_OutputVariable','parameters','return/ids/id')</from>
            </variable>
            <variable name="currentActiveAttack" type="xsd:int">
              <from>1</from>
            </variable>
          </variables>
          <sequence name="Sequence1">
            <invoke name="getAvailableSlavesInvoke"
                    partnerLink="OSB_Name_Server_WS"
                    portType="ns2:Name_Server_WS" operation="getAvailableSlaves"
                    inputVariable="getAvailableSlavesInvoke_getAvailableSlaves_InputVariable"
                    outputVariable="getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable"
                    bpelx:invokeAsDetail="no"/>
            <if name="CheckAvailableSlaves">
              <documentation>
                <![CDATA[ThereAreNotAvailables]]>
              </documentation>
              <condition>ora:countNodes('getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable','parameters','return/availableSlaves') = 0</condition>
              <exit name="ThereAreNotAvailables"/>
              <else>
                <documentation>
                  <![CDATA[ThereAreAvailables]]>
                </documentation>
                <forEach parallel="no" counterName="ForEachSlaveCounter"
                         name="ForEachSlave">
                  <startCounterValue>1</startCounterValue>
                  <finalCounterValue>ora:countNodes('getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable','parameters','return/availableSlaves')</finalCounterValue>
                  <scope name="SlaveInvocationScope" exitOnStandardFault="no">
                    <variables>
                      <variable name="getCurrentActiveAttackInvoke_getActiveAttack_InputVariable"
                                messageType="ns5:getActiveAttack"/>
                      <variable name="getCurrentActiveAttackInvoke_getActiveAttack_OutputVariable"
                                messageType="ns5:getActiveAttackResponse"/>
                      <variable name="getProcessorInfoInvoke_getProcessorInfo_InputVariable"
                                messageType="ns7:requestMessage"/>
                      <variable name="getProcessorInfoInvoke_getProcessorInfo_OutputVariable"
                                messageType="ns7:replyMessage"/>
                      <variable name="windowSize" type="xsd:int"/>
                      <variable name="windowCount" type="xsd:int"/>
                      <variable name="GetAttackWindowsInvoke_getAttackWindowIdsToSend_InputVariable"
                                messageType="ns5:getAttackWindowIdsToSend"/>
                      <variable name="GetAttackWindowsInvoke_getAttackWindowIdsToSend_OutputVariable"
                                messageType="ns5:getAttackWindowIdsToSendResponse"/>
                      <variable name="johnTheRipperAttack_InputVariable"
                                messageType="ns3:johnTheRipperAttack"/>
                      <variable name="deleteFromNameServerInvoke_deleteLockedSlave_InputVariable"
                                messageType="ns2:deleteLockedSlave"/>
                      <variable name="deleteFromNameServerInvoke_deleteLockedSlave_OutputVariable"
                                messageType="ns2:deleteLockedSlaveResponse"/>
                    </variables>
                    <sequence name="Sequence2">
                      <if name="CheckCurrentAttack">
                        <documentation>
                          <![CDATA[OverflowCurrentAttack]]>
                        </documentation>
                        <condition>$currentActiveAttack &gt; $maxActiveAttacks</condition>
                        <sequence name="Sequence5">
                          <scope name="Scope1">
                            <faultHandlers>
                              <catchAll>
                                <empty name="NothingToDo"/>
                              </catchAll>
                            </faultHandlers>
                            <sequence>
                              <assign name="prepareReleaseSlave">
                                <copy>
                                  <from>$getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable.parameters/return/availableSlaves[$ForEachSlaveCounter]/ip</from>
                                  <to>$johnTheRipperAttack_InputVariable.parameters/johnTheRipperAttackRequest/routing/ip</to>
                                </copy>
                                <copy>
                                  <from>$getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable.parameters/return/availableSlaves[$ForEachSlaveCounter]/port</from>
                                  <to>$johnTheRipperAttack_InputVariable.parameters/johnTheRipperAttackRequest/routing/port</to>
                                </copy>
                                <copy>
                                  <from>0</from>
                                  <to>$johnTheRipperAttack_InputVariable.parameters/johnTheRipperAttackRequest/activeAttackId</to>
                                </copy>
                                <copy>
                                  <from>0</from>
                                  <to>$johnTheRipperAttack_InputVariable.parameters/johnTheRipperAttackRequest/attackWindowId</to>
                                </copy>
                                <copy>
                                  <from>'releaseHash'</from>
                                  <to>$johnTheRipperAttack_InputVariable.parameters/johnTheRipperAttackRequest/hashToCrack</to>
                                </copy>
                                <copy>
                                  <from><literal><dictionary>
    <word>release1</word>
</dictionary></literal></from>
                                  <to>$johnTheRipperAttack_InputVariable.parameters/johnTheRipperAttackRequest/dictionary</to>
                                </copy>
                              </assign>
                              <invoke name="releaseSlaveMockAttackInvoke"
                                      partnerLink="OSB_Slave_John_The_Ripper_WS"
                                      portType="ns3:Slave_John_The_Ripper_WS"
                                      operation="johnTheRipperAttack"
                                      inputVariable="johnTheRipperAttack_InputVariable"
                                      bpelx:invokeAsDetail="no"/>
                            </sequence>
                          </scope>
                        </sequence>
                        <else>
                          <documentation>
                            <![CDATA[OK]]>
                          </documentation>
                          <sequence name="Sequence6">
                            <repeatUntil name="RepeatUntil_GetAttackWindows">
                              <sequence name="RepeatUntilSequence">
                                <assign name="prepareInputGetCurrentActiveAttack">
                                  <copy>
                                    <from>$getAllActiveAttacksId_OutputVariable.parameters/return/ids/id[$currentActiveAttack]</from>
                                    <to>$getCurrentActiveAttackInvoke_getActiveAttack_InputVariable.parameters/getActiveAttackRequest/id</to>
                                  </copy>
                                </assign>
                                <invoke name="getCurrentActiveAttackInvoke"
                                        partnerLink="Master_Attack_WS"
                                        portType="ns5:Master_Attack_WS"
                                        operation="getActiveAttack"
                                        inputVariable="getCurrentActiveAttackInvoke_getActiveAttack_InputVariable"
                                        outputVariable="getCurrentActiveAttackInvoke_getActiveAttack_OutputVariable"
                                        bpelx:invokeAsDetail="no"/>
                                <assign name="prepareInputGetProcessorInfo">
                                  <copy>
                                    <from>$getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable.parameters/return/availableSlaves[$ForEachSlaveCounter]/processor_name</from>
                                    <to>$getProcessorInfoInvoke_getProcessorInfo_InputVariable.processorName</to>
                                  </copy>
                                  <copy>
                                    <from>$getCurrentActiveAttackInvoke_getActiveAttack_OutputVariable.parameters/return/tool</from>
                                    <to>$getProcessorInfoInvoke_getProcessorInfo_InputVariable.attackType</to>
                                  </copy>
                                </assign>
                                <invoke name="getProcessorInfoInvoke"
                                        partnerLink="Get_Processor_Info_Process.get_processor_info_process_client"
                                        portType="ns7:get_processor_info_ptt"
                                        operation="getProcessorInfo"
                                        inputVariable="getProcessorInfoInvoke_getProcessorInfo_InputVariable"
                                        outputVariable="getProcessorInfoInvoke_getProcessorInfo_OutputVariable"
                                        bpelx:invokeAsDetail="no"/>
                                <scope name="Rule1" exitOnStandardFault="no">
                                  <bpelx:annotation>
                                    <bpelx:pattern patternName="bpelx:decide"/>
                                    <bpelx:general>
                                      <bpelx:property name="userLabel">
                                        <![CDATA[Rules]]>
                                      </bpelx:property>
                                    </bpelx:general>
                                  </bpelx:annotation>
                                  <variables>
                                    <variable name="dsIn"
                                              messageType="ns4:callFunctionStatelessMessage"/>
                                    <variable name="dsOut"
                                              messageType="ns4:callFunctionStatelessDecisionMessage"/>
                                  </variables>
                                  <sequence name="Sequence3">
                                    <assign name="Facts_To_Rule_Service">
                                      <copy>
                                        <from>$getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable.parameters/return/availableSlaves[$ForEachSlaveCounter]/processor_name</from>
                                        <to>$dsIn.payload/ns4:parameterList/ns9:windowSizeRequest/processor_name</to>
                                      </copy>
                                      <copy>
                                        <from>0</from>
                                        <to>$dsIn.payload/ns4:parameterList/ns9:windowSizeRequest/totalWords</to>
                                      </copy>
                                      <copy>
                                        <from>$getProcessorInfoInvoke_getProcessorInfo_OutputVariable.wordsPerMinute</from>
                                        <to>$dsIn.payload/ns4:parameterList/ns9:windowSizeRequest/words_per_minute</to>
                                      </copy>
                                    </assign>
                                    <assign name="BPEL_Header">
                                      <copy>
                                        <from>"Window_Size_Rules_DecisionService_1"</from>
                                        <to variable="dsIn" part="payload">
                                          <query>@name</query>
                                        </to>
                                      </copy>
                                    </assign>
                                    <invoke name="Invoke"
                                            partnerLink="Window_Size_Rules.Window_Size_Rules_DecisionService_1"
                                            portType="ns4:IDecisionService"
                                            operation="callFunctionStateless"
                                            inputVariable="dsIn"
                                            outputVariable="dsOut"/>
                                    <assign name="Rule_Service_To_Facts">
                                      <copy>
                                        <from>$dsOut.payload/ns4:resultList/ns9:windowSizeResponse/windowSize</from>
                                        <to>$windowSize</to>
                                      </copy>
                                      <copy>
                                        <from>$dsOut.payload/ns4:resultList/ns9:windowSizeResponse/windowsCount</from>
                                        <to>$windowCount</to>
                                      </copy>
                                    </assign>
                                  </sequence>
                                </scope>
                                <assign name="prepareGetAttackWindows">
                                  <copy>
                                    <from>$getCurrentActiveAttackInvoke_getActiveAttack_OutputVariable.parameters/return/id</from>
                                    <to>$GetAttackWindowsInvoke_getAttackWindowIdsToSend_InputVariable.parameters/getAttackWindowIdsToSendRequest/activeAttackId</to>
                                  </copy>
                                  <copy>
                                    <from>$windowCount</from>
                                    <to>$GetAttackWindowsInvoke_getAttackWindowIdsToSend_InputVariable.parameters/getAttackWindowIdsToSendRequest/maxWindows</to>
                                  </copy>
                                </assign>
                                <invoke name="GetAttackWindowsInvoke"
                                        partnerLink="Master_Attack_WS"
                                        portType="ns5:Master_Attack_WS"
                                        operation="getAttackWindowIdsToSend"
                                        inputVariable="GetAttackWindowsInvoke_getAttackWindowIdsToSend_InputVariable"
                                        outputVariable="GetAttackWindowsInvoke_getAttackWindowIdsToSend_OutputVariable"
                                        bpelx:invokeAsDetail="no"/>
                                <if name="checkAttackWindows">
                                  <documentation>
                                    <![CDATA[NoAttackWindows]]>
                                  </documentation>
                                  <condition>ora:countNodes('GetAttackWindowsInvoke_getAttackWindowIdsToSend_OutputVariable','parameters','return/ids/id') = 0</condition>
                                  <assign name="incrementActiveAttack">
                                    <copy>
                                      <from>$currentActiveAttack +1</from>
                                      <to>$currentActiveAttack</to>
                                    </copy>
                                  </assign>
                                  <else>
                                    <empty name="NothingToDo"/>
                                  </else>
                                </if>
                              </sequence>
                              <condition>ora:countNodes('GetAttackWindowsInvoke_getAttackWindowIdsToSend_OutputVariable','parameters','return/ids/id') &gt; 0 or $currentActiveAttack &gt; $maxActiveAttacks</condition>
                            </repeatUntil>
                            <if name="CheckCurrentAttack">
                              <documentation>
                                <![CDATA[OverflowCurrentAttack]]>
                              </documentation>
                              <condition>$currentActiveAttack &gt; $maxActiveAttacks</condition>
                              <sequence name="Sequence7">
                                <scope name="Scope2">
                                  <faultHandlers>
                                    <catchAll>
                                      <empty name="NothingToDo"/>
                                    </catchAll>
                                  </faultHandlers>
                                  <sequence>
                                    <assign name="prepareReleaseSlave">
                                      <copy>
                                        <from>$getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable.parameters/return/availableSlaves[$ForEachSlaveCounter]/ip</from>
                                        <to>$johnTheRipperAttack_InputVariable.parameters/johnTheRipperAttackRequest/routing/ip</to>
                                      </copy>
                                      <copy>
                                        <from>$getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable.parameters/return/availableSlaves[$ForEachSlaveCounter]/port</from>
                                        <to>$johnTheRipperAttack_InputVariable.parameters/johnTheRipperAttackRequest/routing/port</to>
                                      </copy>
                                      <copy>
                                        <from>0</from>
                                        <to>$johnTheRipperAttack_InputVariable.parameters/johnTheRipperAttackRequest/activeAttackId</to>
                                      </copy>
                                      <copy>
                                        <from>0</from>
                                        <to>$johnTheRipperAttack_InputVariable.parameters/johnTheRipperAttackRequest/attackWindowId</to>
                                      </copy>
                                      <copy>
                                        <from>'releaseHash'</from>
                                        <to>$johnTheRipperAttack_InputVariable.parameters/johnTheRipperAttackRequest/hashToCrack</to>
                                      </copy>
                                      <copy>
                                        <from><literal><dictionary>
    <word>release1</word>
</dictionary></literal></from>
                                        <to>$johnTheRipperAttack_InputVariable.parameters/johnTheRipperAttackRequest/dictionary</to>
                                      </copy>
                                    </assign>
                                    <invoke name="releaseSlaveMockAttackInvoke"
                                            partnerLink="OSB_Slave_John_The_Ripper_WS"
                                            portType="ns3:Slave_John_The_Ripper_WS"
                                            operation="johnTheRipperAttack"
                                            inputVariable="johnTheRipperAttack_InputVariable"
                                            bpelx:invokeAsDetail="no"/>
                                  </sequence>
                                </scope>
                              </sequence>
                              <else>
                                <documentation>
                                  <![CDATA[OK]]>
                                </documentation>
                                <scope name="SendAndUpdateAttackWindowScope"
                                       exitOnStandardFault="no">
                                  <variables>
                                    <variable name="GetAttackWindowInvoke_getWordsRange_InputVariable"
                                              messageType="ns6:getWordsRange"/>
                                    <variable name="GetAttackWindowInvoke_getWordsRange_OutputVariable"
                                              messageType="ns6:getWordsRangeResponse"/>
                                    <variable name="includeFrom"
                                              type="xsd:string"/>
                                    <variable name="includeTo"
                                              type="xsd:string"/>
                                    <variable name="johnTheRipperAttack"
                                              messageType="ns3:johnTheRipperAttack"/>
                                    <variable name="firstAttackWindow"
                                              type="xsd:long"/>
                                    <variable name="thcHydraAttack"
                                              messageType="ns3:thcHydraAttack"/>
                                  </variables>
                                  <sequence name="Sequence8">
                                    <assign name="getFirstAttackWindow">
                                      <copy>
                                        <from>$GetAttackWindowsInvoke_getAttackWindowIdsToSend_OutputVariable.parameters/return/ids/id[1]</from>
                                        <to>$firstAttackWindow</to>
                                      </copy>
                                    </assign>
                                    <forEach parallel="yes"
                                             counterName="ForEachAttackWindowCounter"
                                             name="ForEachAttackWindow">
                                      <startCounterValue>1</startCounterValue>
                                      <finalCounterValue>ora:countNodes('GetAttackWindowsInvoke_getAttackWindowIdsToSend_OutputVariable','parameters','return/ids/id')</finalCounterValue>
                                      <scope name="ForEachAttackWindowScope"
                                             exitOnStandardFault="no">
                                        <variables>
                                          <variable name="findAttackWindowById_InputVariable"
                                                    messageType="ns5:findAttackWindowById"/>
                                          <variable name="findAttackWindowById_OutputVariable"
                                                    messageType="ns5:findAttackWindowByIdResponse"/>
                                          <variable name="UpdateAttackWindowInvoke_updateAttackWindow_InputVariable"
                                                    messageType="ns5:updateAttackWindow"/>
                                          <variable name="UpdateAttackWindowInvoke_updateAttackWindow_OutputVariable"
                                                    messageType="ns5:updateAttackWindowResponse"/>
                                          <variable name="getNowInvoke_getDateTimeInMilliseconds_InputVariable"
                                                    messageType="ns10:getDateTimeInMillisecondsInput"/>
                                          <variable name="getNowInvoke_getDateTimeInMilliseconds_OutputVariable"
                                                    messageType="ns10:getDateTimeInMillisecondsOutput"/>
                                        </variables>
                                        <sequence name="Sequence11">
                                          <assign name="prepareGetAttackWindow">
                                            <copy>
                                              <from>$GetAttackWindowsInvoke_getAttackWindowIdsToSend_OutputVariable.parameters/return/ids/id[$ForEachAttackWindowCounter]</from>
                                              <to>$findAttackWindowById_InputVariable.parameters/findAttackWindowByIdRequest/id</to>
                                            </copy>
                                          </assign>
                                          <invoke name="getAttackWindowInvoke"
                                                  partnerLink="Master_Attack_WS"
                                                  portType="ns5:Master_Attack_WS"
                                                  operation="findAttackWindowById"
                                                  inputVariable="findAttackWindowById_InputVariable"
                                                  outputVariable="findAttackWindowById_OutputVariable"
                                                  bpelx:invokeAsDetail="no"/>
                                          <if name="CheckIfFirst">
                                            <documentation>
                                              <![CDATA[First]]>
                                            </documentation>
                                            <condition>$ForEachAttackWindowCounter = 1</condition>
                                            <assign name="AssignFirst">
                                              <copy>
                                                <from>$findAttackWindowById_OutputVariable.parameters/return/firstDictionaryWord</from>
                                                <to>$includeFrom</to>
                                              </copy>
                                            </assign>
                                            <else>
                                              <documentation>
                                                <![CDATA[NoFirst]]>
                                              </documentation>
                                              <empty name="NothingToDo"/>
                                            </else>
                                          </if>
                                          <if name="CheckLast">
                                            <documentation>
                                              <![CDATA[Last]]>
                                            </documentation>
                                            <condition>ora:countNodes('GetAttackWindowsInvoke_getAttackWindowIdsToSend_OutputVariable','parameters','return/ids/id') = $ForEachAttackWindowCounter</condition>
                                            <assign name="AssignLast">
                                              <copy>
                                                <from>$findAttackWindowById_OutputVariable.parameters/return/lastDictionaryWord</from>
                                                <to>$includeTo</to>
                                              </copy>
                                            </assign>
                                            <else>
                                              <documentation>
                                                <![CDATA[NoLast]]>
                                              </documentation>
                                              <empty name="NothinToDo"/>
                                            </else>
                                          </if>
                                          <invoke name="getNowInvoke"
                                                  partnerLink="MasterHelper.MasterHelperService"
                                                  portType="ns10:MasterHelperInterface"
                                                  operation="getDateTimeInMilliseconds"
                                                  inputVariable="getNowInvoke_getDateTimeInMilliseconds_InputVariable"
                                                  outputVariable="getNowInvoke_getDateTimeInMilliseconds_OutputVariable"
                                                  bpelx:invokeAsDetail="no"/>
                                          <assign name="prepareUpdate">
                                            <copy>
                                              <from>$findAttackWindowById_OutputVariable.parameters/return/id</from>
                                              <to>$UpdateAttackWindowInvoke_updateAttackWindow_InputVariable.parameters/updateAttackWindowRequest/id</to>
                                            </copy>
                                            <copy>
                                              <from>$findAttackWindowById_OutputVariable.parameters/return/activeAttackId</from>
                                              <to>$UpdateAttackWindowInvoke_updateAttackWindow_InputVariable.parameters/updateAttackWindowRequest/activeAttackId</to>
                                            </copy>
                                            <copy>
                                              <from>($findAttackWindowById_OutputVariable.parameters/return/attemps) + 1</from>
                                              <to>$UpdateAttackWindowInvoke_updateAttackWindow_InputVariable.parameters/updateAttackWindowRequest/attemps</to>
                                            </copy>
                                            <copy>
                                              <from>$findAttackWindowById_OutputVariable.parameters/return/processed</from>
                                              <to>$UpdateAttackWindowInvoke_updateAttackWindow_InputVariable.parameters/updateAttackWindowRequest/processed</to>
                                            </copy>
                                            <copy>
                                              <from>(ora:countNodes('GetAttackWindowsInvoke_getAttackWindowIdsToSend_OutputVariable','parameters','return/ids/id')) - 1</from>
                                              <to>$UpdateAttackWindowInvoke_updateAttackWindow_InputVariable.parameters/updateAttackWindowRequest/factor</to>
                                            </copy>
                                            <copy ignoreMissingFromData="yes">
                                              <from>$findAttackWindowById_OutputVariable.parameters/return/firstDictionaryWord</from>
                                              <to>$UpdateAttackWindowInvoke_updateAttackWindow_InputVariable.parameters/updateAttackWindowRequest/firstDictionaryWord</to>
                                            </copy>
                                            <copy ignoreMissingFromData="yes">
                                              <from>$findAttackWindowById_OutputVariable.parameters/return/lastDictionaryWord</from>
                                              <to>$UpdateAttackWindowInvoke_updateAttackWindow_InputVariable.parameters/updateAttackWindowRequest/lastDictionaryWord</to>
                                            </copy>
                                            <copy ignoreMissingFromData="yes">
                                              <from>$findAttackWindowById_OutputVariable.parameters/return/bfPattern</from>
                                              <to>$UpdateAttackWindowInvoke_updateAttackWindow_InputVariable.parameters/updateAttackWindowRequest/bfPattern</to>
                                            </copy>
                                            <copy>
                                              <from>$getNowInvoke_getDateTimeInMilliseconds_OutputVariable.parameters/return</from>
                                              <to>$UpdateAttackWindowInvoke_updateAttackWindow_InputVariable.parameters/updateAttackWindowRequest/sentTimestamp</to>
                                            </copy>
                                          </assign>
                                          <invoke name="UpdateAttackWindowInvoke"
                                                  partnerLink="Master_Attack_WS"
                                                  portType="ns5:Master_Attack_WS"
                                                  operation="updateAttackWindow"
                                                  inputVariable="UpdateAttackWindowInvoke_updateAttackWindow_InputVariable"
                                                  outputVariable="UpdateAttackWindowInvoke_updateAttackWindow_OutputVariable"
                                                  bpelx:invokeAsDetail="no"/>
                                        </sequence>
                                      </scope>
                                    </forEach>
                                    <assign name="prepareGetWordsRange">
                                      <copy>
                                        <from>$includeFrom</from>
                                        <to>$GetAttackWindowInvoke_getWordsRange_InputVariable.parameters/getWordsRangeRequest/includeFromWord</to>
                                      </copy>
                                      <copy>
                                        <from>$includeTo</from>
                                        <to>$GetAttackWindowInvoke_getWordsRange_InputVariable.parameters/getWordsRangeRequest/includeToWord</to>
                                      </copy>
                                    </assign>
                                    <invoke name="GetAttackWindowInvoke"
                                            partnerLink="Get_Words_Range_Process.get_words_range_process_client"
                                            portType="ns6:Master_Word_WS"
                                            operation="getWordsRange"
                                            inputVariable="GetAttackWindowInvoke_getWordsRange_InputVariable"
                                            outputVariable="GetAttackWindowInvoke_getWordsRange_OutputVariable"
                                            bpelx:invokeAsDetail="no"/>
                                    <if name="CheckTool">
                                      <documentation>
                                        <![CDATA[JohnTheRipper]]>
                                      </documentation>
                                      <condition>$getCurrentActiveAttackInvoke_getActiveAttack_OutputVariable.parameters/return/tool = 'john'</condition>
                                      <sequence name="Sequence9">
                                        <assign name="addDictionary">
                                          <bpelx:annotation>
                                            <bpelx:pattern patternName="bpelx:transformation"/>
                                          </bpelx:annotation>
                                          <copy>
                                            <from>ora:doXSLTransformForDoc("xsl/addJohnDictionary.xsl", $GetAttackWindowInvoke_getWordsRange_OutputVariable.parameters)</from>
                                            <to variable="johnTheRipperAttack"
                                                part="parameters"/>
                                          </copy>
                                        </assign>
                                        <assign name="prepareJohnRequest">
                                          <copy>
                                            <from>$getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable.parameters/return/availableSlaves[$ForEachSlaveCounter]/ip</from>
                                            <to>$johnTheRipperAttack.parameters/johnTheRipperAttackRequest/routing/ip</to>
                                          </copy>
                                          <copy>
                                            <from>$firstAttackWindow</from>
                                            <to>$johnTheRipperAttack.parameters/johnTheRipperAttackRequest/attackWindowId</to>
                                          </copy>
                                          <copy>
                                            <from>$getCurrentActiveAttackInvoke_getActiveAttack_OutputVariable.parameters/return/id</from>
                                            <to>$johnTheRipperAttack.parameters/johnTheRipperAttackRequest/activeAttackId</to>
                                          </copy>
                                          <copy ignoreMissingFromData="yes">
                                            <from>$getCurrentActiveAttackInvoke_getActiveAttack_OutputVariable.parameters/return/attackType</from>
                                            <to>$johnTheRipperAttack.parameters/johnTheRipperAttackRequest/format</to>
                                          </copy>
                                          <copy>
                                            <from>$getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable.parameters/return/availableSlaves[$ForEachSlaveCounter]/port</from>
                                            <to>$johnTheRipperAttack.parameters/johnTheRipperAttackRequest/routing/port</to>
                                          </copy>
                                          <copy>
                                            <from>$getCurrentActiveAttackInvoke_getActiveAttack_OutputVariable.parameters/return/hashToCrack</from>
                                            <to>$johnTheRipperAttack.parameters/johnTheRipperAttackRequest/hashToCrack</to>
                                          </copy>
                                        </assign>
                                        <scope name="Scope4">
                                          <faultHandlers>
                                            <catchAll>
                                              <empty name="NothingToDo"/>
                                            </catchAll>
                                          </faultHandlers>
                                          <invoke name="JohnInvoke"
                                                  partnerLink="OSB_Slave_John_The_Ripper_WS"
                                                  portType="ns3:Slave_John_The_Ripper_WS"
                                                  operation="johnTheRipperAttack"
                                                  inputVariable="johnTheRipperAttack"
                                                  bpelx:invokeAsDetail="no"/>
                                        </scope>
                                      </sequence>
                                      <else>
                                        <documentation>
                                          <![CDATA[THC_Hydra]]>
                                        </documentation>
                                        <sequence name="Sequence10">
                                          <assign name="addDictionary">
                                            <bpelx:annotation>
                                              <bpelx:pattern patternName="bpelx:transformation"/>
                                            </bpelx:annotation>
                                            <copy>
                                              <from>ora:doXSLTransformForDoc("xsl/addHydraDictionary.xsl", $GetAttackWindowInvoke_getWordsRange_OutputVariable.parameters)</from>
                                              <to variable="thcHydraAttack"
                                                  part="parameters"/>
                                            </copy>
                                          </assign>
                                          <assign name="prepareHydraRequest">
                                            <copy>
                                              <from>$getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable.parameters/return/availableSlaves[$ForEachSlaveCounter]/ip</from>
                                              <to>$thcHydraAttack.parameters/thcHydraAttackRequest/routing/ip</to>
                                            </copy>
                                            <copy>
                                              <from>$getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable.parameters/return/availableSlaves[$ForEachSlaveCounter]/port</from>
                                              <to>$thcHydraAttack.parameters/thcHydraAttackRequest/routing/port</to>
                                            </copy>
                                            <copy>
                                              <from>$firstAttackWindow</from>
                                              <to>$thcHydraAttack.parameters/thcHydraAttackRequest/attackWindowId</to>
                                            </copy>
                                            <copy>
                                              <from>$getCurrentActiveAttackInvoke_getActiveAttack_OutputVariable.parameters/return/id</from>
                                              <to>$thcHydraAttack.parameters/thcHydraAttackRequest/activeAttackId</to>
                                            </copy>
                                            <copy>
                                              <from>$getCurrentActiveAttackInvoke_getActiveAttack_OutputVariable.parameters/return/attackType</from>
                                              <to>$thcHydraAttack.parameters/thcHydraAttackRequest/type</to>
                                            </copy>
                                            <copy>
                                              <from>$getCurrentActiveAttackInvoke_getActiveAttack_OutputVariable.parameters/return/remoteUser</from>
                                              <to>$thcHydraAttack.parameters/thcHydraAttackRequest/remoteUser</to>
                                            </copy>
                                            <copy>
                                              <from>$getCurrentActiveAttackInvoke_getActiveAttack_OutputVariable.parameters/return/remoteIp</from>
                                              <to>$thcHydraAttack.parameters/thcHydraAttackRequest/remoteIp</to>
                                            </copy>
                                            <copy ignoreMissingFromData="yes">
                                              <from>$getCurrentActiveAttackInvoke_getActiveAttack_OutputVariable.parameters/return/remotePort</from>
                                              <to>$thcHydraAttack.parameters/thcHydraAttackRequest/remotePort</to>
                                            </copy>
                                            <copy ignoreMissingFromData="yes">
                                              <from>$getCurrentActiveAttackInvoke_getActiveAttack_OutputVariable.parameters/return/extraParam</from>
                                              <to>$thcHydraAttack.parameters/thcHydraAttackRequest/extraParam</to>
                                            </copy>
                                          </assign>
                                          <scope name="Scope5">
                                            <faultHandlers>
                                              <catchAll>
                                                <empty name="NothingToDo"/>
                                              </catchAll>
                                            </faultHandlers>
                                            <invoke name="HydraInvoke"
                                                    partnerLink="OSB_Slave_THC_Hydra_WS"
                                                    portType="ns3:Slave_THC_Hydra_WS"
                                                    operation="thcHydraAttack"
                                                    inputVariable="thcHydraAttack"
                                                    bpelx:invokeAsDetail="no"/>
                                          </scope>
                                        </sequence>
                                      </else>
                                    </if>
                                  </sequence>
                                </scope>
                              </else>
                            </if>
                          </sequence>
                        </else>
                      </if>
                      <scope name="Scope3">
                        <faultHandlers>
                          <catchAll>
                            <empty name="NothingToDo"/>
                          </catchAll>
                        </faultHandlers>
                        <sequence>
                          <assign name="prepareDeleteFromNameServer">
                            <copy>
                              <from>$getAvailableSlavesInvoke_getAvailableSlaves_OutputVariable.parameters/return/availableSlaves[$ForEachSlaveCounter]/id</from>
                              <to>$deleteFromNameServerInvoke_deleteLockedSlave_InputVariable.parameters/deleteLockedSlaveRequest/id</to>
                            </copy>
                          </assign>
                          <invoke name="deleteFromNameServerInvoke"
                                  partnerLink="OSB_Name_Server_WS"
                                  portType="ns2:Name_Server_WS"
                                  operation="deleteLockedSlave"
                                  inputVariable="deleteFromNameServerInvoke_deleteLockedSlave_InputVariable"
                                  outputVariable="deleteFromNameServerInvoke_deleteLockedSlave_OutputVariable"
                                  bpelx:invokeAsDetail="no"/>
                        </sequence>
                      </scope>
                    </sequence>
                  </scope>
                </forEach>
              </else>
            </if>
          </sequence>
        </scope>
      </else>
    </if>
  </sequence>
</process>